<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Kenzi Connor</title>
      <link>https://knz.ai</link>
      <description>Staff Software Engineer - VP Engineering - Director of Engineering - CEO &amp; CTO</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://knz.ai/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sat, 20 Jul 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Handling FormData and file inputs in Rust Wasm</title>
          <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
          <author>Kenzi Connor</author>
          <link>https://knz.ai/posts/wasm-file-form/</link>
          <guid>https://knz.ai/posts/wasm-file-form/</guid>
          <description xml:base="https://knz.ai/posts/wasm-file-form/">&lt;p&gt;I submitted some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;knzai&#x2F;yew&#x2F;pulls&quot;&gt;pull requests for additional examples&lt;&#x2F;a&gt; to the top level library I&#x27;m using for Rust Wasm, &lt;a href=&quot;https:&#x2F;&#x2F;yew.rs&#x2F;&quot;&gt;yew&lt;&#x2F;a&gt;. Some of the underlying tech and libraries have advanced since most examples were created, and there wasn&#x27;t a simple one for one of the more common use cases (using a form with multiple fields, including a file-input selector).&lt;&#x2F;p&gt;
&lt;p&gt;Given there&#x27;s a lot of PRs outstanding and the their CI is a bit b0rked, I don&#x27;t know hwo likely they&#x27;ll get pulled in, so I should document here. Also, some of the answers apply to the underlying lbraries even if you aren&#x27;t using yew and it took some digging through reddit, code, examples, and finally Discord to find the current simplest answers.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Exporting a Google Doc into a PDF in a Github Action</title>
          <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
          <author>Kenzi Connor</author>
          <link>https://knz.ai/posts/gdoc-pdf-export/</link>
          <guid>https://knz.ai/posts/gdoc-pdf-export/</guid>
          <description xml:base="https://knz.ai/posts/gdoc-pdf-export/">&lt;p&gt;ETA: this, of course, I then rolled into a &lt;a href=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;projects&#x2F;ggdrive&#x2F;&quot;&gt;bash script with way too nice of usage()* for a few-liner&lt;&#x2F;a&gt;.  [*bash convention for the help function]&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that grabbing the current pdf export of my resume during zola build was even easier than &lt;a href=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;posts&#x2F;cleaning-gdocs&#x2F;&quot;&gt;cleaning the Google HTML&lt;&#x2F;a&gt;. Once you&#x27;ve setup the Google API keys it&#x27;s basically one wget (which is already installed on their ubuntu runner) call.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;download pdf
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wget -O &amp;#39;tmp.pdf&amp;#39; --user-agent=&amp;#39;github.com&#x2F;knzai&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;#39;https:&#x2F;&#x2F;www.googleapis.com&#x2F;drive&#x2F;v2&#x2F;files&#x2F;${{vars.GOOGLE_FILE_ID}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &#x2F;export?mimeType=application&#x2F;pdf&amp;amp;key=${{secrets.GOOGLE_API_KEY}}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;replace pdf with newer, if valid (over 30k)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    if [ $(du -k &amp;#39;tmp.pdf&amp;#39; | cut -f1) -gt 30 ]; then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      mv tmp.pdf static&#x2F;assets&#x2F;Kenzi\ Connor\ Resume.pdf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      exit 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>Cleaning Up Web Published Google Docs</title>
          <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
          <author>Kenzi Connor</author>
          <link>https://knz.ai/posts/cleaning-gdocs/</link>
          <guid>https://knz.ai/posts/cleaning-gdocs/</guid>
          <description xml:base="https://knz.ai/posts/cleaning-gdocs/">&lt;p&gt;As you probably know, Google Docs &quot;Publish to Web&quot; settings doesn&#x27;t provide the cleanest html, not to mention the giant header it tacks on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;posts&#x2F;cleaning-gdocs.png&quot; alt=&quot;Parsing content with Rust regexes in Zola&quot; title=&quot;Cleaning Up Web Published Google Docs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
