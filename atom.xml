<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Kenzi Connor</title>
    <subtitle>Staff Software Engineer - VP Engineering - Director of Engineering - CEO &amp; CTO</subtitle>
    <link rel="self" type="application/atom+xml" href="https://knz.ai/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://knz.ai"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-07-28T00:00:00+00:00</updated>
    <id>https://knz.ai/atom.xml</id>
    <entry xml:lang="en">
        <title>Using Ruby enum_for to implement multiple paths enumerating the same Enumerable</title>
        <published>2024-07-28T00:00:00+00:00</published>
        <updated>2024-07-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Kenzi Connor
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://knz.ai/posts/ruby-enum-for/"/>
        <id>https://knz.ai/posts/ruby-enum-for/</id>
        
        <summary type="html">&lt;p&gt;Anyone who as gotten very far in a basic &quot;implement this data structure&quot; tech-screen, using Ruby, hopefully knows about just making your &lt;a href=&quot;https:&#x2F;&#x2F;blog.appsignal.com&#x2F;2018&#x2F;05&#x2F;29&#x2F;ruby-magic-enumerable-and-enumerator.html&quot;&gt;class an &lt;code&gt;Enumerable&lt;&#x2F;code&gt; and implementing &lt;code&gt;#each&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to get all of the methods of that Mixin, which people are used to using on collections in any Ruby project. Less obvious is how you tackle a more complex case, like trees (another interview classic), which have different possible traversal methods of even the same instance.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;ll show how to use enum_for to make an interface for a Tree class that supports these different styles of usage for traversals:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;depth = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;assert_equal depth, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;.map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;assert_equal depth, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;.each.map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;assert_equal depth, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;.each(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:depth&lt;&#x2F;span&gt;&lt;span&gt;).map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;breadth = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;assert_equal breadth, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;.breadth.map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;assert_equal breadth, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;.each(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:breadth&lt;&#x2F;span&gt;&lt;span&gt;).map(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Handling FormData and file inputs in Rust Wasm</title>
        <published>2024-07-20T00:00:00+00:00</published>
        <updated>2024-07-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Kenzi Connor
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://knz.ai/posts/wasm-file-form/"/>
        <id>https://knz.ai/posts/wasm-file-form/</id>
        
        <summary type="html">&lt;p&gt;I submitted some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;knzai&#x2F;yew&#x2F;pulls&quot;&gt;pull requests for additional examples&lt;&#x2F;a&gt; to the top level library I&#x27;m using for Rust Wasm, &lt;a href=&quot;https:&#x2F;&#x2F;yew.rs&#x2F;&quot;&gt;yew&lt;&#x2F;a&gt;. Some of the underlying tech and libraries have advanced since most of the examples were created, and there wasn&#x27;t a simple one for a very common use case: using a form with multiple fields, including a file-input selector.&lt;&#x2F;p&gt;
&lt;p&gt;Given there are a lot of PRs outstanding and the their CI is a bit b0rked, I don&#x27;t know how likely it is they&#x27;ll get pulled in, so I&#x27;ll document here. Also, some of the answers apply to the underlying lbraries even if you aren&#x27;t using yew, and it took some digging through reddit, code, examples, and finally Discord to find the simplest answers using the current state of all the pieces.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Exporting a Google Doc into a PDF in a Github Action</title>
        <published>2024-07-09T00:00:00+00:00</published>
        <updated>2024-07-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Kenzi Connor
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://knz.ai/posts/gdoc-pdf-export/"/>
        <id>https://knz.ai/posts/gdoc-pdf-export/</id>
        
        <content type="html" xml:base="https://knz.ai/posts/gdoc-pdf-export/">&lt;p&gt;ETA: this, of course, I then rolled into a &lt;a href=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;projects&#x2F;ggdrive&#x2F;&quot;&gt;bash script with way too nice of usage()* for a few-liner&lt;&#x2F;a&gt;.  *bash convention for the help function&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that grabbing the current pdf export of my resume during zola build was even easier than &lt;a href=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;posts&#x2F;cleaning-gdocs&#x2F;&quot;&gt;cleaning the Google HTML&lt;&#x2F;a&gt;. Once you&#x27;ve setup the Google API keys it&#x27;s basically one wget (which is already installed on their ubuntu runner) call.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;download pdf
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wget -O &amp;#39;tmp.pdf&amp;#39; --user-agent=&amp;#39;github.com&#x2F;knzai&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;#39;https:&#x2F;&#x2F;www.googleapis.com&#x2F;drive&#x2F;v2&#x2F;files&#x2F;${{vars.GOOGLE_FILE_ID}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &#x2F;export?mimeType=application&#x2F;pdf&amp;amp;key=${{secrets.GOOGLE_API_KEY}}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;replace pdf with newer, if valid (over 30k)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    if [ $(du -k &amp;#39;tmp.pdf&amp;#39; | cut -f1) -gt 30 ]; then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      mv tmp.pdf static&#x2F;assets&#x2F;Kenzi\ Connor\ Resume.pdf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      exit 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cleaning Up Web Published Google Docs</title>
        <published>2024-07-06T00:00:00+00:00</published>
        <updated>2024-07-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Kenzi Connor
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://knz.ai/posts/cleaning-gdocs/"/>
        <id>https://knz.ai/posts/cleaning-gdocs/</id>
        
        <summary type="html">&lt;p&gt;As you probably know, Google Docs &quot;Publish to Web&quot; settings doesn&#x27;t provide the cleanest html, not to mention the giant header it tacks on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;knz.ai&#x2F;posts&#x2F;cleaning-gdocs.png&quot; alt=&quot;Parsing content with Rust regexes in Zola&quot; title=&quot;Cleaning Up Web Published Google Docs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
